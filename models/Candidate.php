<?php

namespace app\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "candidate".
 *
 * @property int $id ID
 * @property int $user
 * @property string $title Titulek
 * @property string $date Datum vydání
 * @property string $knowledge Dopočítaný znalostní rámec
 * @property string $entity Entita (blok textu)
 * @property int $sentence Pořadí věty v bloku (0-based)
 * @property int|null $created_at Datum vytvoření
 * @property int|null $updated_at Datum poslední změny
 *
 * @property User $user0
 */
class Candidate extends ActiveRecord
{
    const JSON_FIELDS = ['knowledge', 'context', 'sentences'];
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'candidate';
    }

    public function behaviors()
    {
        return [TimestampBehavior::class,];
    }

    public function afterFind()
    {
        foreach (self::JSON_FIELDS as $json){
            $this->$json = json_decode($this->$json,true);
        }
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['user', 'title', 'date', 'knowledge', 'entity', 'sentence', 'context', 'sentences'], 'required'],
            [['user', 'sentence'], 'integer'],
            [['date'], 'safe'],
            [['knowledge', 'context', 'sentences'], 'string'],
            [['title'], 'string', 'max' => 328],
            [['entity'], 'string', 'max' => 64],
            [['user'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user' => 'id']],
        ];
    }

    public function beforeValidate()
    {
        foreach (self::JSON_FIELDS as $json) {
            $this->$json = json_encode($this->$json,JSON_UNESCAPED_UNICODE);
        }
        return parent::beforeValidate();
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user' => 'User',
            'title' => 'Titulek',
            'date' => 'Datum vydání',
            'knowledge' => 'Dopočítaný znalostní rámec',
            'entity' => 'Entita (blok textu)',
            'sentence' => 'Pořadí věty v bloku (0-based)',
            'created_at' => 'Datum vytvoření',
            'updated_at' => 'Datum poslední změny',
        ];
    }

    /**
     * Gets query for [[User0]].
     *
     * @return ActiveQuery
     */
    public function getUser0()
    {
        return $this->hasOne(User::className(), ['id' => 'user']);
    }
}
